// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: postgres_extension/v1/postgres_extension.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// =============================
// Index Type Enum
// =============================
type IndexType int32

const (
	IndexType_INDEX_TYPE_UNSPECIFIED IndexType = 0
	IndexType_INDEX_TYPE_BTREE       IndexType = 1
	IndexType_INDEX_TYPE_GIN         IndexType = 2
	IndexType_INDEX_TYPE_GIST        IndexType = 3
	IndexType_INDEX_TYPE_HASH        IndexType = 4
)

// Enum value maps for IndexType.
var (
	IndexType_name = map[int32]string{
		0: "INDEX_TYPE_UNSPECIFIED",
		1: "INDEX_TYPE_BTREE",
		2: "INDEX_TYPE_GIN",
		3: "INDEX_TYPE_GIST",
		4: "INDEX_TYPE_HASH",
	}
	IndexType_value = map[string]int32{
		"INDEX_TYPE_UNSPECIFIED": 0,
		"INDEX_TYPE_BTREE":       1,
		"INDEX_TYPE_GIN":         2,
		"INDEX_TYPE_GIST":        3,
		"INDEX_TYPE_HASH":        4,
	}
)

func (x IndexType) Enum() *IndexType {
	p := new(IndexType)
	*p = x
	return p
}

func (x IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_extension_v1_postgres_extension_proto_enumTypes[0].Descriptor()
}

func (IndexType) Type() protoreflect.EnumType {
	return &file_postgres_extension_v1_postgres_extension_proto_enumTypes[0]
}

func (x IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexType.Descriptor instead.
func (IndexType) EnumDescriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{0}
}

// =============================
// Foreign Key Action Enum
// =============================
type ForeignKeyAction int32

const (
	ForeignKeyAction_FOREIGN_KEY_ACTION_UNSPECIFIED ForeignKeyAction = 0
	ForeignKeyAction_FOREIGN_KEY_ACTION_RESTRICT    ForeignKeyAction = 1
	ForeignKeyAction_FOREIGN_KEY_ACTION_CASCADE     ForeignKeyAction = 2
	ForeignKeyAction_FOREIGN_KEY_ACTION_SET_NULL    ForeignKeyAction = 3
	ForeignKeyAction_FOREIGN_KEY_ACTION_SET_DEFAULT ForeignKeyAction = 4
)

// Enum value maps for ForeignKeyAction.
var (
	ForeignKeyAction_name = map[int32]string{
		0: "FOREIGN_KEY_ACTION_UNSPECIFIED",
		1: "FOREIGN_KEY_ACTION_RESTRICT",
		2: "FOREIGN_KEY_ACTION_CASCADE",
		3: "FOREIGN_KEY_ACTION_SET_NULL",
		4: "FOREIGN_KEY_ACTION_SET_DEFAULT",
	}
	ForeignKeyAction_value = map[string]int32{
		"FOREIGN_KEY_ACTION_UNSPECIFIED": 0,
		"FOREIGN_KEY_ACTION_RESTRICT":    1,
		"FOREIGN_KEY_ACTION_CASCADE":     2,
		"FOREIGN_KEY_ACTION_SET_NULL":    3,
		"FOREIGN_KEY_ACTION_SET_DEFAULT": 4,
	}
)

func (x ForeignKeyAction) Enum() *ForeignKeyAction {
	p := new(ForeignKeyAction)
	*p = x
	return p
}

func (x ForeignKeyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForeignKeyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_extension_v1_postgres_extension_proto_enumTypes[1].Descriptor()
}

func (ForeignKeyAction) Type() protoreflect.EnumType {
	return &file_postgres_extension_v1_postgres_extension_proto_enumTypes[1]
}

func (x ForeignKeyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForeignKeyAction.Descriptor instead.
func (ForeignKeyAction) EnumDescriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{1}
}

// =============================
// Column Constraint Enum
// =============================
type ColumnConstraint int32

const (
	ColumnConstraint_COLUMN_CONSTRAINT_UNSPECIFIED ColumnConstraint = 0
	ColumnConstraint_COLUMN_CONSTRAINT_PRIMARY_KEY ColumnConstraint = 1
	ColumnConstraint_COLUMN_CONSTRAINT_NOT_NULL    ColumnConstraint = 2
	ColumnConstraint_COLUMN_CONSTRAINT_UNIQUE      ColumnConstraint = 3
	ColumnConstraint_COLUMN_CONSTRAINT_CHECK       ColumnConstraint = 4
	ColumnConstraint_COLUMN_CONSTRAINT_FOREIGN_KEY ColumnConstraint = 5
)

// Enum value maps for ColumnConstraint.
var (
	ColumnConstraint_name = map[int32]string{
		0: "COLUMN_CONSTRAINT_UNSPECIFIED",
		1: "COLUMN_CONSTRAINT_PRIMARY_KEY",
		2: "COLUMN_CONSTRAINT_NOT_NULL",
		3: "COLUMN_CONSTRAINT_UNIQUE",
		4: "COLUMN_CONSTRAINT_CHECK",
		5: "COLUMN_CONSTRAINT_FOREIGN_KEY",
	}
	ColumnConstraint_value = map[string]int32{
		"COLUMN_CONSTRAINT_UNSPECIFIED": 0,
		"COLUMN_CONSTRAINT_PRIMARY_KEY": 1,
		"COLUMN_CONSTRAINT_NOT_NULL":    2,
		"COLUMN_CONSTRAINT_UNIQUE":      3,
		"COLUMN_CONSTRAINT_CHECK":       4,
		"COLUMN_CONSTRAINT_FOREIGN_KEY": 5,
	}
)

func (x ColumnConstraint) Enum() *ColumnConstraint {
	p := new(ColumnConstraint)
	*p = x
	return p
}

func (x ColumnConstraint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnConstraint) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_extension_v1_postgres_extension_proto_enumTypes[2].Descriptor()
}

func (ColumnConstraint) Type() protoreflect.EnumType {
	return &file_postgres_extension_v1_postgres_extension_proto_enumTypes[2]
}

func (x ColumnConstraint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnConstraint.Descriptor instead.
func (ColumnConstraint) EnumDescriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{2}
}

type Partitioning_Type int32

const (
	Partitioning_TYPE_UNSPECIFIED Partitioning_Type = 0
	Partitioning_TYPE_RANGE       Partitioning_Type = 1
	Partitioning_TYPE_HASH        Partitioning_Type = 2
	Partitioning_TYPE_LIST        Partitioning_Type = 3
)

// Enum value maps for Partitioning_Type.
var (
	Partitioning_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_RANGE",
		2: "TYPE_HASH",
		3: "TYPE_LIST",
	}
	Partitioning_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_RANGE":       1,
		"TYPE_HASH":        2,
		"TYPE_LIST":        3,
	}
)

func (x Partitioning_Type) Enum() *Partitioning_Type {
	p := new(Partitioning_Type)
	*p = x
	return p
}

func (x Partitioning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Partitioning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_postgres_extension_v1_postgres_extension_proto_enumTypes[3].Descriptor()
}

func (Partitioning_Type) Type() protoreflect.EnumType {
	return &file_postgres_extension_v1_postgres_extension_proto_enumTypes[3]
}

func (x Partitioning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Partitioning_Type.Descriptor instead.
func (Partitioning_Type) EnumDescriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{2, 0}
}

// =============================
// Table-Level Properties
// =============================
type TableProperties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`                                                            // PostgreSQL table name.
	Schema        string                 `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`                                                                                   // Schema for the table.
	Properties    map[string]string      `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // General table properties (e.g., autovacuum settings).
	Indexes       []*IndexDefinition     `protobuf:"bytes,4,rep,name=indexes,proto3" json:"indexes,omitempty"`                                                                                 // Table indexes.
	Partitioning  *Partitioning          `protobuf:"bytes,5,opt,name=partitioning,proto3" json:"partitioning,omitempty"`                                                                       // Partitioning details.
	Grants        []*Grant               `protobuf:"bytes,6,rep,name=grants,proto3" json:"grants,omitempty"`                                                                                   // Permissions or grants for the table.
	Exclusions    []*ExclusionConstraint `protobuf:"bytes,7,rep,name=exclusions,proto3" json:"exclusions,omitempty"`                                                                           // Exclusion constraints.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableProperties) Reset() {
	*x = TableProperties{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableProperties) ProtoMessage() {}

func (x *TableProperties) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableProperties.ProtoReflect.Descriptor instead.
func (*TableProperties) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{0}
}

func (x *TableProperties) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableProperties) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TableProperties) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *TableProperties) GetIndexes() []*IndexDefinition {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *TableProperties) GetPartitioning() *Partitioning {
	if x != nil {
		return x.Partitioning
	}
	return nil
}

func (x *TableProperties) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *TableProperties) GetExclusions() []*ExclusionConstraint {
	if x != nil {
		return x.Exclusions
	}
	return nil
}

// =============================
// Index Definition
// =============================
type IndexDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Index name.
	Columns       []string               `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`                                                            // Columns included in the index.
	Expression    string                 `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`                                                      // Expression for expression-based indexes.
	IndexType     IndexType              `protobuf:"varint,4,opt,name=index_type,json=indexType,proto3,enum=postgres_extension.v1.IndexType" json:"index_type,omitempty"` // Index type.
	Unique        bool                   `protobuf:"varint,5,opt,name=unique,proto3" json:"unique,omitempty"`                                                             // Unique index.
	WhereClause   string                 `protobuf:"bytes,6,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`                                 // Partial index condition.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexDefinition) Reset() {
	*x = IndexDefinition{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDefinition) ProtoMessage() {}

func (x *IndexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDefinition.ProtoReflect.Descriptor instead.
func (*IndexDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{1}
}

func (x *IndexDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexDefinition) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexDefinition) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *IndexDefinition) GetIndexType() IndexType {
	if x != nil {
		return x.IndexType
	}
	return IndexType_INDEX_TYPE_UNSPECIFIED
}

func (x *IndexDefinition) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *IndexDefinition) GetWhereClause() string {
	if x != nil {
		return x.WhereClause
	}
	return ""
}

// =============================
// Partitioning Definition
// =============================
type Partitioning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          Partitioning_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=postgres_extension.v1.Partitioning_Type" json:"type,omitempty"` // Partitioning type.
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`                                               // Partitioning keys.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Partitioning) Reset() {
	*x = Partitioning{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partitioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partitioning) ProtoMessage() {}

func (x *Partitioning) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partitioning.ProtoReflect.Descriptor instead.
func (*Partitioning) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{2}
}

func (x *Partitioning) GetType() Partitioning_Type {
	if x != nil {
		return x.Type
	}
	return Partitioning_TYPE_UNSPECIFIED
}

func (x *Partitioning) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// =============================
// Permissions and Grants
// =============================
type Grant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Privilege     string                 `protobuf:"bytes,1,opt,name=privilege,proto3" json:"privilege,omitempty"` // Privilege type (e.g., SELECT, INSERT).
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`           // Role receiving the privilege.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Grant) Reset() {
	*x = Grant{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{3}
}

func (x *Grant) GetPrivilege() string {
	if x != nil {
		return x.Privilege
	}
	return ""
}

func (x *Grant) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// =============================
// Exclusion Constraint
// =============================
type ExclusionConstraint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                  // Constraint name.
	Expression    string                 `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`                                                      // Expression or column involved.
	Operator      string                 `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                          // Exclusion operator (e.g., "WITH &&").
	IndexType     IndexType              `protobuf:"varint,4,opt,name=index_type,json=indexType,proto3,enum=postgres_extension.v1.IndexType" json:"index_type,omitempty"` // Index type for the constraint.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExclusionConstraint) Reset() {
	*x = ExclusionConstraint{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExclusionConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExclusionConstraint) ProtoMessage() {}

func (x *ExclusionConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExclusionConstraint.ProtoReflect.Descriptor instead.
func (*ExclusionConstraint) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{4}
}

func (x *ExclusionConstraint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExclusionConstraint) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ExclusionConstraint) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *ExclusionConstraint) GetIndexType() IndexType {
	if x != nil {
		return x.IndexType
	}
	return IndexType_INDEX_TYPE_UNSPECIFIED
}

// =============================
// Column-Level Properties
// =============================
type ColumnProperties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnType    string                 `protobuf:"bytes,1,opt,name=column_type,json=columnType,proto3" json:"column_type,omitempty"`                                        // PostgreSQL data type for the column.
	Constraints   []ColumnConstraint     `protobuf:"varint,2,rep,packed,name=constraints,proto3,enum=postgres_extension.v1.ColumnConstraint" json:"constraints,omitempty"`    // Column constraints (e.g., PRIMARY KEY, NOT NULL).
	DefaultValue  string                 `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`                                  // Default value for the column.
	ForeignKey    string                 `protobuf:"bytes,4,opt,name=foreign_key,json=foreignKey,proto3" json:"foreign_key,omitempty"`                                        // Foreign key reference (table.column).
	OnDelete      ForeignKeyAction       `protobuf:"varint,5,opt,name=on_delete,json=onDelete,proto3,enum=postgres_extension.v1.ForeignKeyAction" json:"on_delete,omitempty"` // Action on delete.
	OnUpdate      ForeignKeyAction       `protobuf:"varint,6,opt,name=on_update,json=onUpdate,proto3,enum=postgres_extension.v1.ForeignKeyAction" json:"on_update,omitempty"` // Action on update.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnProperties) Reset() {
	*x = ColumnProperties{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProperties) ProtoMessage() {}

func (x *ColumnProperties) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProperties.ProtoReflect.Descriptor instead.
func (*ColumnProperties) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{5}
}

func (x *ColumnProperties) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *ColumnProperties) GetConstraints() []ColumnConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ColumnProperties) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ColumnProperties) GetForeignKey() string {
	if x != nil {
		return x.ForeignKey
	}
	return ""
}

func (x *ColumnProperties) GetOnDelete() ForeignKeyAction {
	if x != nil {
		return x.OnDelete
	}
	return ForeignKeyAction_FOREIGN_KEY_ACTION_UNSPECIFIED
}

func (x *ColumnProperties) GetOnUpdate() ForeignKeyAction {
	if x != nil {
		return x.OnUpdate
	}
	return ForeignKeyAction_FOREIGN_KEY_ACTION_UNSPECIFIED
}

// =============================
// Advanced Properties
// =============================
type AdvancedColumnProperties struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GeneratedColumn   bool                   `protobuf:"varint,1,opt,name=generated_column,json=generatedColumn,proto3" json:"generated_column,omitempty"`       // Generated column.
	IdentityColumn    bool                   `protobuf:"varint,2,opt,name=identity_column,json=identityColumn,proto3" json:"identity_column,omitempty"`          // Identity column.
	Deferrable        bool                   `protobuf:"varint,3,opt,name=deferrable,proto3" json:"deferrable,omitempty"`                                        // Deferrable constraint.
	InitiallyDeferred bool                   `protobuf:"varint,4,opt,name=initially_deferred,json=initiallyDeferred,proto3" json:"initially_deferred,omitempty"` // Initially deferred constraint.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AdvancedColumnProperties) Reset() {
	*x = AdvancedColumnProperties{}
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancedColumnProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedColumnProperties) ProtoMessage() {}

func (x *AdvancedColumnProperties) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_extension_v1_postgres_extension_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedColumnProperties.ProtoReflect.Descriptor instead.
func (*AdvancedColumnProperties) Descriptor() ([]byte, []int) {
	return file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP(), []int{6}
}

func (x *AdvancedColumnProperties) GetGeneratedColumn() bool {
	if x != nil {
		return x.GeneratedColumn
	}
	return false
}

func (x *AdvancedColumnProperties) GetIdentityColumn() bool {
	if x != nil {
		return x.IdentityColumn
	}
	return false
}

func (x *AdvancedColumnProperties) GetDeferrable() bool {
	if x != nil {
		return x.Deferrable
	}
	return false
}

func (x *AdvancedColumnProperties) GetInitiallyDeferred() bool {
	if x != nil {
		return x.InitiallyDeferred
	}
	return false
}

var file_postgres_extension_v1_postgres_extension_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*TableProperties)(nil),
		Field:         50000,
		Name:          "postgres_extension.v1.table_properties",
		Tag:           "bytes,50000,opt,name=table_properties",
		Filename:      "postgres_extension/v1/postgres_extension.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ColumnProperties)(nil),
		Field:         51000,
		Name:          "postgres_extension.v1.column_properties",
		Tag:           "bytes,51000,opt,name=column_properties",
		Filename:      "postgres_extension/v1/postgres_extension.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*AdvancedColumnProperties)(nil),
		Field:         55000,
		Name:          "postgres_extension.v1.advanced_column_properties",
		Tag:           "bytes,55000,opt,name=advanced_column_properties",
		Filename:      "postgres_extension/v1/postgres_extension.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         58000,
		Name:          "postgres_extension.v1.is_composite_type",
		Tag:           "varint,58000,opt,name=is_composite_type",
		Filename:      "postgres_extension/v1/postgres_extension.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional postgres_extension.v1.TableProperties table_properties = 50000;
	E_TableProperties = &file_postgres_extension_v1_postgres_extension_proto_extTypes[0] // Custom table properties.
	// optional bool is_composite_type = 58000;
	E_IsCompositeType = &file_postgres_extension_v1_postgres_extension_proto_extTypes[3] // Marks the message as a composite type.
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional postgres_extension.v1.ColumnProperties column_properties = 51000;
	E_ColumnProperties = &file_postgres_extension_v1_postgres_extension_proto_extTypes[1] // Custom column properties.
	// optional postgres_extension.v1.AdvancedColumnProperties advanced_column_properties = 55000;
	E_AdvancedColumnProperties = &file_postgres_extension_v1_postgres_extension_proto_extTypes[2] // Advanced properties.
)

var File_postgres_extension_v1_postgres_extension_proto protoreflect.FileDescriptor

var file_postgres_extension_v1_postgres_extension_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x03, 0x0a, 0x0f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x03, 0x22, 0x39, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0xa6, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x10, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x44, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x18, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x2a, 0x7b, 0x0a, 0x09,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x54, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x04, 0x2a, 0xbc, 0x01, 0x0a, 0x10, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x53, 0x43, 0x41, 0x44,
	0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x2a, 0xd6, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x05, 0x3a, 0x74, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x75, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb8, 0x8e, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x8e,
	0x01, 0x0a, 0x1a, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd8, 0xad, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x18, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x3a,
	0x4d, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x90, 0xc5, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0xf2,
	0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x61, 0x63, 0x6b, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2d, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x14, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_postgres_extension_v1_postgres_extension_proto_rawDescOnce sync.Once
	file_postgres_extension_v1_postgres_extension_proto_rawDescData = file_postgres_extension_v1_postgres_extension_proto_rawDesc
)

func file_postgres_extension_v1_postgres_extension_proto_rawDescGZIP() []byte {
	file_postgres_extension_v1_postgres_extension_proto_rawDescOnce.Do(func() {
		file_postgres_extension_v1_postgres_extension_proto_rawDescData = protoimpl.X.CompressGZIP(file_postgres_extension_v1_postgres_extension_proto_rawDescData)
	})
	return file_postgres_extension_v1_postgres_extension_proto_rawDescData
}

var file_postgres_extension_v1_postgres_extension_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_postgres_extension_v1_postgres_extension_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_postgres_extension_v1_postgres_extension_proto_goTypes = []any{
	(IndexType)(0),                      // 0: postgres_extension.v1.IndexType
	(ForeignKeyAction)(0),               // 1: postgres_extension.v1.ForeignKeyAction
	(ColumnConstraint)(0),               // 2: postgres_extension.v1.ColumnConstraint
	(Partitioning_Type)(0),              // 3: postgres_extension.v1.Partitioning.Type
	(*TableProperties)(nil),             // 4: postgres_extension.v1.TableProperties
	(*IndexDefinition)(nil),             // 5: postgres_extension.v1.IndexDefinition
	(*Partitioning)(nil),                // 6: postgres_extension.v1.Partitioning
	(*Grant)(nil),                       // 7: postgres_extension.v1.Grant
	(*ExclusionConstraint)(nil),         // 8: postgres_extension.v1.ExclusionConstraint
	(*ColumnProperties)(nil),            // 9: postgres_extension.v1.ColumnProperties
	(*AdvancedColumnProperties)(nil),    // 10: postgres_extension.v1.AdvancedColumnProperties
	nil,                                 // 11: postgres_extension.v1.TableProperties.PropertiesEntry
	(*descriptorpb.MessageOptions)(nil), // 12: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 13: google.protobuf.FieldOptions
}
var file_postgres_extension_v1_postgres_extension_proto_depIdxs = []int32{
	11, // 0: postgres_extension.v1.TableProperties.properties:type_name -> postgres_extension.v1.TableProperties.PropertiesEntry
	5,  // 1: postgres_extension.v1.TableProperties.indexes:type_name -> postgres_extension.v1.IndexDefinition
	6,  // 2: postgres_extension.v1.TableProperties.partitioning:type_name -> postgres_extension.v1.Partitioning
	7,  // 3: postgres_extension.v1.TableProperties.grants:type_name -> postgres_extension.v1.Grant
	8,  // 4: postgres_extension.v1.TableProperties.exclusions:type_name -> postgres_extension.v1.ExclusionConstraint
	0,  // 5: postgres_extension.v1.IndexDefinition.index_type:type_name -> postgres_extension.v1.IndexType
	3,  // 6: postgres_extension.v1.Partitioning.type:type_name -> postgres_extension.v1.Partitioning.Type
	0,  // 7: postgres_extension.v1.ExclusionConstraint.index_type:type_name -> postgres_extension.v1.IndexType
	2,  // 8: postgres_extension.v1.ColumnProperties.constraints:type_name -> postgres_extension.v1.ColumnConstraint
	1,  // 9: postgres_extension.v1.ColumnProperties.on_delete:type_name -> postgres_extension.v1.ForeignKeyAction
	1,  // 10: postgres_extension.v1.ColumnProperties.on_update:type_name -> postgres_extension.v1.ForeignKeyAction
	12, // 11: postgres_extension.v1.table_properties:extendee -> google.protobuf.MessageOptions
	13, // 12: postgres_extension.v1.column_properties:extendee -> google.protobuf.FieldOptions
	13, // 13: postgres_extension.v1.advanced_column_properties:extendee -> google.protobuf.FieldOptions
	12, // 14: postgres_extension.v1.is_composite_type:extendee -> google.protobuf.MessageOptions
	4,  // 15: postgres_extension.v1.table_properties:type_name -> postgres_extension.v1.TableProperties
	9,  // 16: postgres_extension.v1.column_properties:type_name -> postgres_extension.v1.ColumnProperties
	10, // 17: postgres_extension.v1.advanced_column_properties:type_name -> postgres_extension.v1.AdvancedColumnProperties
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	15, // [15:18] is the sub-list for extension type_name
	11, // [11:15] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_postgres_extension_v1_postgres_extension_proto_init() }
func file_postgres_extension_v1_postgres_extension_proto_init() {
	if File_postgres_extension_v1_postgres_extension_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_postgres_extension_v1_postgres_extension_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_postgres_extension_v1_postgres_extension_proto_goTypes,
		DependencyIndexes: file_postgres_extension_v1_postgres_extension_proto_depIdxs,
		EnumInfos:         file_postgres_extension_v1_postgres_extension_proto_enumTypes,
		MessageInfos:      file_postgres_extension_v1_postgres_extension_proto_msgTypes,
		ExtensionInfos:    file_postgres_extension_v1_postgres_extension_proto_extTypes,
	}.Build()
	File_postgres_extension_v1_postgres_extension_proto = out.File
	file_postgres_extension_v1_postgres_extension_proto_rawDesc = nil
	file_postgres_extension_v1_postgres_extension_proto_goTypes = nil
	file_postgres_extension_v1_postgres_extension_proto_depIdxs = nil
}
